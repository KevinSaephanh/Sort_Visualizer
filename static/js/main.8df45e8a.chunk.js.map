{"version":3,"sources":["assets/snek.png","components/Header/Header.tsx","utils/ElementUtils.tsx","utils/algorithms/BubbleSort.tsx","utils/algorithms/QuickSort.tsx","components/Array/Array.tsx","utils/algorithms/InsertionSort.tsx","utils/algorithms/SelectionSort.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","algorithm","sorting","mode","sorted","handleClickAlgorithm","handleClickMode","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Dropdown","id","Menu","Button","name","onClick","disabled","ElementUtils","initArray","array","i","newElement","createRandomElement","push","randNum","Math","floor","random","image","Snek","length","isSorted","arr","current","previous","swap","next","temp","currIndex","indexOf","nextIndex","changeElementColor","element","hsl","document","getElementById","style","background","partition","low","high","swapSet","pivot","elements","Array","toggleSorting","toggleSorted","React","setArr","setSorting","sort","animateSort","resetArr","highlightSorted","sorter","swapped","SortUtils","quickSort","pi","j","min","pair","shift","setTimeout","handleUpdateArray","index","splice","forEach","map","key","height","App","setAlgorithm","setMode","setSorted","e","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,uNCa9BC,G,MAAS,SAAC,GAON,IANbC,EAMY,EANZA,UAEAC,GAIY,EALZC,KAKY,EAJZD,SACAE,EAGY,EAHZA,OACAC,EAEY,EAFZA,qBACAC,EACY,EADZA,gBAEA,OACI,gBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,MACxB,gBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,IAAnB,mBACA,gBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,gBAACN,EAAA,EAAOO,SAAR,KACI,gBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,gBAACC,EAAA,EAAD,KACI,gBAACA,EAAA,EAASL,OAAV,CAAiBM,GAAG,kBACfjB,GAEL,gBAACgB,EAAA,EAASE,KAAV,KACI,gBAACC,EAAA,EAAD,CACIC,KAAK,cACLC,QAASjB,GAFb,eAMA,gBAACe,EAAA,EAAD,CACIC,KAAK,aACLC,QAASjB,GAFb,cAMA,gBAACe,EAAA,EAAD,CACIC,KAAK,iBACLC,QAASjB,GAFb,kBAMA,gBAACe,EAAA,EAAD,CACIC,KAAK,iBACLC,QAASjB,GAFb,oBAQR,gBAACe,EAAA,EAAD,CACIJ,UAAU,YACVK,KAAK,QACLE,UAAsB,IAAZrB,EACVoB,QAAShB,GAJb,SAQA,gBAACc,EAAA,EAAD,CACIJ,UAAU,WACVK,KAAK,OACLE,SACkB,eAAdtB,IACY,IAAZC,IACW,IAAXE,EAEJkB,QAAShB,GARb,a,iCC/DCkB,E,kCAAAA,EACVC,UAAY,WAIf,IAHA,IAAMC,EAAmB,GAGhBC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMC,EAAaJ,EAAaK,sBAChCH,EAAMI,KAAKF,GAGf,OAAOF,GAVMF,EAaVK,oBAAsB,WACzB,IAAME,EAAUC,KAAKC,MAAM,IAAAD,KAAKE,SAAyB,KAKzD,MAJ4B,CACxBC,MAAOC,IACPC,OAAQN,IAjBCP,EAsBVc,SAAW,SAACC,GACf,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAAIF,OAAS,EAAGV,IAAK,CACrC,IAAMa,EAAmBD,EAAIZ,GACvBc,EAAoBF,EAAIZ,EAAI,GAElC,GAAIa,GAAWC,GAAYD,EAAQH,OAASI,EAASJ,OACjD,OAAO,EAEf,OAAO,GA9BMb,EAiCVkB,KAAO,SACVH,EACAC,EACAG,GAEA,IAAMC,EAAI,YAAOL,GACXM,EAAYN,EAAIO,QAAQN,GACxBO,EAAYR,EAAIO,QAAQH,GAHlB,EAKyB,CAACC,EAAKG,GAAYH,EAAKC,IAC5D,OADCD,EAAKC,GALM,KAKMD,EAAKG,GALX,KAMLH,GA3CMpB,EA8CVwB,mBAAqB,SACxBT,EACAU,EACAC,GAEgC,IAAD,EAA3BX,EAAIA,EAAIO,QAAQG,OACgB,UAAGE,SAASC,eAAT,kBACpBb,EAAIO,QAAQG,YADK,aAAG,EAEhCI,OACGC,WAAN,gEAA4EJ,EAA5E,QCpDL,ICuBDK,EAAY,SACdhB,EACAiB,EACAC,EACAC,GAIA,IAFA,IAAMC,EAAiBpB,EAAIP,KAAKC,OAAOuB,EAAMC,GAAQ,IAE9CD,GAAOC,GAAM,CAEhB,KAAOlB,EAAIiB,GAAKnB,OAASsB,EAAMtB,QAAQmB,IAGvC,KAAOjB,EAAIkB,GAAMpB,OAASsB,EAAMtB,QAAQoB,IAExC,GAAID,GAAOC,EAAM,CACbC,EAAQ5B,KAAK,CAACS,EAAIiB,GAAMjB,EAAIkB,IAAO,IADtB,MAEW,CAAClB,EAAIkB,GAAOlB,EAAIiB,IAAvCjB,EAAIiB,GAFQ,KAEFjB,EAAIkB,GAFF,KAGbD,IACAC,SACGC,EAAQ5B,KAAK,CAACS,EAAIiB,GAAMjB,EAAIkB,IAAO,IAG9C,OAAOD,GCvCLI,G,MAAsBpC,EAAaC,aAE5BoC,EAAQ,SAAC,GAKL,IAJb5D,EAIY,EAJZA,UACAE,EAGY,EAHZA,KACA2D,EAEY,EAFZA,cACAC,EACY,EADZA,aACY,EACUC,WAA0BJ,GADpC,mBACLrB,EADK,KACA0B,EADA,OAEkBD,YAAwB,GAF1C,mBAEL9D,EAFK,KAEIgE,EAFJ,KAIZF,aAAgB,WACZ,OAAQ7D,GACJ,IAAK,OACD,IAAMuD,EAAUS,EAAKlE,GACrBiE,GAAW,GACXJ,IACAM,EAAYV,GACZ,MACJ,IAAK,QACDW,OAKT,CAAClE,IAEJ6D,aAAgB,WACRxC,EAAac,SAASC,KAASrC,GAASoE,EAAgB,KAC7D,CAACpE,IAEJ,IAAMiE,EAAO,SAACI,GACV,IAAM3B,EAAI,YAAOL,GAEjB,OAAQgC,GACJ,IAAK,cACD,OF3CU,SAAChC,GACvB,IAAMmB,EAAmC,GACrCc,GAAmB,EAEvB,EAAG,CACCA,GAAU,EACV,IAAK,IAAI7C,EAAI,EAAGA,EAAIY,EAAIF,OAAS,EAAGV,IAAK,CACrC,IAAMa,EAAmBD,EAAIZ,GACvBgB,EAAgBJ,EAAIZ,EAAI,GAG9B,GAAIa,GAAWG,GAAQH,EAAQH,OAASM,EAAKN,OAAQ,CACjDqB,EAAQ5B,KAAK,CAACU,EAASG,GAAM,IADoB,MAE1B,CAACA,EAAMH,GAA7BD,EAAIZ,GAF4C,KAExCY,EAAIZ,EAAI,GAFgC,KAGjD6C,GAAU,OACPd,EAAQ5B,KAAK,CAACU,EAASG,GAAM,WAEnC6B,GAET,OAAOd,EEwBYe,CAAqB7B,GAChC,IAAK,aACD,OD3CS,SAAZ8B,EACTnC,EACAiB,EACAC,EACAC,GAEA,GAAIF,EAAMC,EAAM,CACZ,IAAMkB,EAAapB,EAAUhB,EAAKiB,EAAKC,EAAMC,GAGzCF,EAAMmB,EAAK,GAAGD,EAAUnC,EAAKiB,EAAKmB,EAAK,EAAGjB,GAG1CD,EAAOkB,GAAID,EAAUnC,EAAKoC,EAAIlB,EAAMC,GAE5C,OAAOA,EC4BYe,CAAoB7B,EAAM,EAAGA,EAAKP,OAAS,EALjB,IAMrC,IAAK,iBACD,OC7Ca,SAACE,GAG1B,IAFA,IAAMmB,EAAmC,GAEhC/B,EAAI,EAAGA,EAAIY,EAAIF,OAAQV,IAE5B,IADA,IAAMa,EAAmBD,EAAIZ,GACpBiD,EAAIjD,EAAI,EAAGiD,GAAK,EAAGA,IAAK,CAC7B,IAAMnC,EAAoBF,EAAIqC,GAC9B,GAAIpC,EAAQH,OAASI,EAASJ,OAAQ,CAAC,IAAD,EACX,CAACG,EAASC,GAAhCF,EAAIqC,GAD6B,KACzBrC,EAAIqC,EAAI,GADiB,KAElClB,EAAQ5B,KAAK,CAACW,EAAUD,GAAS,SAC9BkB,EAAQ5B,KAAK,CAACW,EAAUD,GAAS,IAIhD,OAAOkB,ED+BYe,CAAwB7B,GACnC,IAAK,iBACD,OEjDa,SAACL,GAG1B,IAFA,IAAMmB,EAAmC,GAEhC/B,EAAI,EAAGA,EAAIY,EAAIF,OAAS,EAAGV,IAAK,CAErC,IADA,IAAIkD,EAAMlD,EACDiD,EAAIjD,EAAI,EAAGiD,EAAIrC,EAAIF,OAAQuC,IAC5BrC,EAAIsC,GAAKxC,OAASE,EAAIqC,GAAGvC,SAAQwC,EAAMD,GAG/C,GAAIC,IAAQlD,EAAG,CAAC,IAAD,EACU,CAACY,EAAIsC,GAAMtC,EAAIZ,IAAnCY,EAAIZ,GADM,KACFY,EAAIsC,GADF,KAEXnB,EAAQ5B,KAAK,CAACS,EAAIZ,GAAIY,EAAIsC,IAAM,SAC7BnB,EAAQ5B,KAAK,CAACS,EAAIZ,GAAIY,EAAIsC,IAAM,IAG3C,OAAOnB,EFkCYe,CAAwB7B,GACnC,QACI,OAAO,OAIbwB,EAAc,SAAdA,EAAeV,GACjB,GAAIA,EAAQrB,OAAS,EAAG,CACpB,IAAMyC,EAA8BpB,EAAQqB,QACtCvC,EAAUsC,EAAK,GACfnC,EAAOmC,EAAK,GACZpC,EAAOoC,EAAK,GAGlBtD,EAAawB,mBAAmBT,EAAKC,EAAS,kBAC9ChB,EAAawB,mBAAmBT,EAAKI,EAAM,kBAE3CqC,YAAW,WAEHtC,GAAMuC,EAAkBzC,EAASG,GAGrCnB,EAAawB,mBAAmBT,EAAKC,EAAS,kBAC9ChB,EAAawB,mBAAmBT,EAAKI,EAAM,kBAG3CyB,EAAYV,KACb,UACAQ,GAAW,IAGhBe,EAAoB,SAACzC,EAAkBG,GACzCsB,GAAO,SAAC1B,GACJ,OAAOf,EAAakB,KAAb,YAAsBH,GAAMC,EAASG,OAI9C2B,EAAkB,SAAlBA,EAAmBY,GACjB3C,EAAI2C,GACJF,YAAW,WACPxD,EAAawB,mBACTT,EACAA,EAAI2C,GACJ,kBAEJZ,EAAgBY,EAAQ,KACzB,KAEHpB,IACAC,MAIFM,EAAW,WACb,IAAMzB,EAAI,YAAOL,GACjBK,EAAKuC,OAAL,MAAAvC,EAAI,CAAQ,EAAGA,EAAKP,QAAhB,mBAA2Bb,EAAaC,eAC5CwC,EAAOrB,GACPL,EAAI6C,SAAQ,SAACnC,GACTzB,EAAawB,mBAAmBT,EAAKU,EAAS,sBAItD,OACI,uBAAKjC,UAAU,WACVuB,EAAI8C,KAAI,SAACpC,EAASqC,GAAS,IAChBjD,EAAWY,EAAXZ,OAER,OACI,uBACIrB,UAAU,UACVE,GAAE,kBAAaqB,EAAIO,QAAQG,IAC3BqC,IAAKA,EACLjC,MAAO,CAAEkC,OAAQlD,UGzH5BmD,G,YAAM,WAAO,IAAD,EACaxB,WAAuB,cADpC,mBACd/D,EADc,KACHwF,EADG,OAEGzB,WAAuB,IAF1B,mBAEd7D,EAFc,KAERuF,EAFQ,OAGS1B,YAAwB,GAHjC,mBAGd9D,EAHc,KAGLgE,EAHK,OAIOF,YAAwB,GAJ/B,mBAId5D,EAJc,KAINuF,EAJM,KA+BrB,OACI,2BACI,gBAAC,EAAD,CACI1F,UAAWA,EACXE,KAAMA,EACND,QAASA,EACTE,OAAQA,EACRC,qBAhCiB,SAACuF,GAC1BA,EAAEC,iBACFJ,EAAaG,EAAEE,OAAOzE,OA+Bdf,gBA5BY,SAACsF,GACrBA,EAAEC,iBACFH,EAAQE,EAAEE,OAAOzE,MAEK,UAAlBuE,EAAEE,OAAOzE,MAAkBsE,GAAU,GAGzCX,YAAW,WACPU,EAAQ,MACT,QAqBC,gBAAC,EAAD,CACIzF,UAAWA,EACXE,KAAMA,EACN2D,cArBU,WAClBI,GAAYhE,IAqBJ6D,aAlBS,WACjB4B,GAAWvF,SCtBC2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASC,eAAe,SDsI3C,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8df45e8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snek.e646aa39.png\";","import * as React from \"react\";\r\nimport { Navbar, Nav, Dropdown, Button } from \"react-bootstrap\";\r\nimport \"./Header.css\";\r\n\r\ntype AppProps = {\r\n    algorithm: string;\r\n    mode: string;\r\n    sorting: Boolean;\r\n    sorted: Boolean;\r\n    handleClickAlgorithm: (algorithm: any) => any;\r\n    handleClickMode: (mode: any) => any;\r\n};\r\n\r\nexport const Header = ({\r\n    algorithm,\r\n    mode,\r\n    sorting,\r\n    sorted,\r\n    handleClickAlgorithm,\r\n    handleClickMode,\r\n}: AppProps) => {\r\n    return (\r\n        <Navbar bg=\"primary\" expand=\"lg\">\r\n            <Navbar.Brand href=\"\">Sort Visualizer</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse>\r\n                <Nav className=\"mr-auto\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle id=\"dropdown-basic\">\r\n                            {algorithm}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Button\r\n                                name=\"Bubble Sort\"\r\n                                onClick={handleClickAlgorithm}\r\n                            >\r\n                                Bubble Sort\r\n                            </Button>\r\n                            <Button\r\n                                name=\"Quick Sort\"\r\n                                onClick={handleClickAlgorithm}\r\n                            >\r\n                                Quick Sort\r\n                            </Button>\r\n                            <Button\r\n                                name=\"Insertion Sort\"\r\n                                onClick={handleClickAlgorithm}\r\n                            >\r\n                                Insertion Sort\r\n                            </Button>\r\n                            <Button\r\n                                name=\"Selection Sort\"\r\n                                onClick={handleClickAlgorithm}\r\n                            >\r\n                                Selection Sort\r\n                            </Button>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Button\r\n                        className=\"reset-btn\"\r\n                        name=\"Reset\"\r\n                        disabled={sorting === true}\r\n                        onClick={handleClickMode}\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n                    <Button\r\n                        className=\"sort-btn\"\r\n                        name=\"Sort\"\r\n                        disabled={\r\n                            algorithm === \"Algorithms\" ||\r\n                            sorting === true ||\r\n                            sorted === true\r\n                        }\r\n                        onClick={handleClickMode}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n","import Element from \"../models/Element\";\r\nimport Snek from \"../assets/snek.png\";\r\n\r\nexport default class ElementUtils {\r\n    static initArray = (): Element[] => {\r\n        const array: Element[] = [];\r\n\r\n        // Generate a series of random numbers for each element in the array\r\n        for (let i = 0; i < 30; i++) {\r\n            const newElement = ElementUtils.createRandomElement();\r\n            array.push(newElement);\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    static createRandomElement = (): Element => {\r\n        const randNum = Math.floor(Math.random() * (350 - 100) + 100);\r\n        const newElement: Element = {\r\n            image: Snek,\r\n            length: randNum,\r\n        };\r\n        return newElement;\r\n    };\r\n\r\n    static isSorted = (arr: Element[]): Boolean => {\r\n        for (let i = 1; i < arr.length - 1; i++) {\r\n            const current: Element = arr[i];\r\n            const previous: Element = arr[i - 1];\r\n\r\n            if (current && previous && current.length < previous.length)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    static swap = (\r\n        arr: Element[],\r\n        current: Element,\r\n        next: Element\r\n    ): Element[] => {\r\n        const temp = [...arr];\r\n        const currIndex = arr.indexOf(current);\r\n        const nextIndex = arr.indexOf(next);\r\n\r\n        [temp[currIndex], temp[nextIndex]] = [temp[nextIndex], temp[currIndex]];\r\n        return temp;\r\n    };\r\n\r\n    static changeElementColor = (\r\n        arr: Element[],\r\n        element: Element,\r\n        hsl: string\r\n    ) => {\r\n        if (arr[arr.indexOf(element)]) {\r\n            const style: CSSStyleDeclaration = document.getElementById(\r\n                `element-${arr.indexOf(element)}`\r\n            )?.style!;\r\n            style.background = `linear-gradient(to bottom right, hsl(0, 3%, 50%), hsl(${hsl}))`;\r\n        }\r\n    };\r\n}\r\n","import Element from \"../../models/Element\";\r\n\r\n/**\r\n * Optimized implementation always runs at O(n^2)\r\n */\r\n\r\nexport const bubbleSort = (arr: Element[]): (Element | Boolean)[][] => {\r\n    const swapSet: (Element | Boolean)[][] = [];\r\n    let swapped: Boolean = false;\r\n\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < arr.length - 1; i++) {\r\n            const current: Element = arr[i];\r\n            const next: Element = arr[i + 1];\r\n\r\n            // If first element is greater than second, swap places\r\n            if (current && next && current.length > next.length) {\r\n                swapSet.push([current, next, true]);\r\n                [arr[i], arr[i + 1]] = [next, current];\r\n                swapped = true;\r\n            } else swapSet.push([current, next, false]);\r\n        }\r\n    } while (swapped);\r\n\r\n    return swapSet;\r\n};\r\n","import Element from \"../../models/Element\";\r\n\r\n/**\r\n * Best Case: O(n log(n))\r\n * Average Case: O(n log(n))\r\n * Worst Case: O(n^2)\r\n */\r\n\r\nexport const quickSort = (\r\n    arr: Element[],\r\n    low: number,\r\n    high: number,\r\n    swapSet: (Element | Boolean)[][]\r\n): (Element | Boolean)[][] => {\r\n    if (low < high) {\r\n        const pi: number = partition(arr, low, high, swapSet);\r\n\r\n        // Before partition\r\n        if (low < pi - 1) quickSort(arr, low, pi - 1, swapSet);\r\n\r\n        // After partition\r\n        if (high > pi) quickSort(arr, pi, high, swapSet);\r\n    }\r\n    return swapSet;\r\n};\r\n\r\n// Hoare partition scheme initialized with indexes from edges of array\r\n// Starting at each edge, traverse toward each other until an inversion is detected\r\n// Swap inverted elements\r\nconst partition = (\r\n    arr: Element[],\r\n    low: number,\r\n    high: number,\r\n    swapSet: (Element | Boolean)[][]\r\n): number => {\r\n    const pivot: Element = arr[Math.floor((low + high) / 2)];\r\n\r\n    while (low <= high) {\r\n        // Forward traversal and comparison until pivot is reached\r\n        while (arr[low].length < pivot.length) low++;\r\n\r\n        // Backward traversal and comparison until pivot is reached\r\n        while (arr[high].length > pivot.length) high--;\r\n\r\n        if (low <= high) {\r\n            swapSet.push([arr[low], arr[high], true]);\r\n            [arr[low], arr[high]] = [arr[high], arr[low]];\r\n            low++;\r\n            high--;\r\n        } else swapSet.push([arr[low], arr[high], false]);\r\n    }\r\n\r\n    return low;\r\n};\r\n","import * as React from \"react\";\r\nimport Element from \"../../models/Element\";\r\nimport ElementUtils from \"../../utils/ElementUtils\";\r\nimport * as SortUtils from \"../../utils/algorithms/index\";\r\nimport \"./Array.css\";\r\n\r\ntype AppProps = {\r\n    algorithm: string;\r\n    mode: string;\r\n    toggleSorting: () => void;\r\n    toggleSorted: () => void;\r\n};\r\n\r\nconst elements: Element[] = ElementUtils.initArray();\r\n\r\nexport const Array = ({\r\n    algorithm,\r\n    mode,\r\n    toggleSorting,\r\n    toggleSorted,\r\n}: AppProps) => {\r\n    const [arr, setArr] = React.useState<Element[]>(elements);\r\n    const [sorting, setSorting] = React.useState<Boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        switch (mode) {\r\n            case \"Sort\":\r\n                const swapSet = sort(algorithm)!;\r\n                setSorting(true);\r\n                toggleSorting();\r\n                animateSort(swapSet);\r\n                break;\r\n            case \"Reset\":\r\n                resetArr();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [mode]);\r\n\r\n    React.useEffect(() => {\r\n        if (ElementUtils.isSorted(arr) && !sorting) highlightSorted(0);\r\n    }, [sorting]);\r\n\r\n    const sort = (sorter: string): (Element | Boolean)[][] | null => {\r\n        const temp = [...arr];\r\n        const swapSet: (Element | Boolean)[][] = [];\r\n        switch (sorter) {\r\n            case \"Bubble Sort\":\r\n                return SortUtils.bubbleSort(temp);\r\n            case \"Quick Sort\":\r\n                return SortUtils.quickSort(temp, 0, temp.length - 1, swapSet);\r\n            case \"Insertion Sort\":\r\n                return SortUtils.insertionSort(temp);\r\n            case \"Selection Sort\":\r\n                return SortUtils.selectionSort(temp);\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const animateSort = (swapSet: (Element | Boolean)[][]): void => {\r\n        if (swapSet.length > 0) {\r\n            const pair: (Element | Boolean)[] = swapSet.shift()!;\r\n            const current = pair[0] as Element;\r\n            const next = pair[1] as Element;\r\n            const swap = pair[2] as Boolean;\r\n\r\n            // Change element color to new hsl to indicate visit\r\n            ElementUtils.changeElementColor(arr, current, \"276, 100%, 50%\");\r\n            ElementUtils.changeElementColor(arr, next, \"276, 100%, 50%\");\r\n\r\n            setTimeout(() => {\r\n                // Swap element indexes in array\r\n                if (swap) handleUpdateArray(current, next);\r\n\r\n                // Reset element color to original hsl\r\n                ElementUtils.changeElementColor(arr, current, \"219, 100%, 50%\");\r\n                ElementUtils.changeElementColor(arr, next, \"219, 100%, 50%\");\r\n\r\n                // Recursive call\r\n                animateSort(swapSet);\r\n            }, 100);\r\n        } else setSorting(false);\r\n    };\r\n\r\n    const handleUpdateArray = (current: Element, next: Element): void => {\r\n        setArr((arr) => {\r\n            return ElementUtils.swap([...arr], current, next);\r\n        });\r\n    };\r\n\r\n    const highlightSorted = (index: number): void => {\r\n        if (arr[index]) {\r\n            setTimeout(() => {\r\n                ElementUtils.changeElementColor(\r\n                    arr,\r\n                    arr[index],\r\n                    \"155, 100%, 50%\"\r\n                );\r\n                highlightSorted(index + 1);\r\n            }, 35);\r\n        } else {\r\n            toggleSorting();\r\n            toggleSorted();\r\n        }\r\n    };\r\n\r\n    const resetArr = (): void => {\r\n        const temp = [...arr];\r\n        temp.splice(0, temp.length, ...ElementUtils.initArray());\r\n        setArr(temp);\r\n        arr.forEach((element) => {\r\n            ElementUtils.changeElementColor(arr, element, \"219, 100%, 50%\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {arr.map((element, key) => {\r\n                const { length } = element;\r\n\r\n                return (\r\n                    <div\r\n                        className=\"element\"\r\n                        id={`element-${arr.indexOf(element)}`}\r\n                        key={key}\r\n                        style={{ height: length }}\r\n                    ></div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import Element from \"../../models/Element\";\r\n\r\n/**\r\n * Best Case: O(n)\r\n * Average Case: O(n^2)\r\n * Worst Case: O(n^2)\r\n */\r\n\r\nexport const insertionSort = (arr: Element[]): (Element | Boolean)[][] => {\r\n    const swapSet: (Element | Boolean)[][] = [];\r\n\r\n    for (let i = 1; i < arr.length; i++) {\r\n        const current: Element = arr[i];\r\n        for (let j = i - 1; j >= 0; j--) {\r\n            const previous: Element = arr[j];\r\n            if (current.length < previous.length) {\r\n                [arr[j], arr[j + 1]] = [current, previous];\r\n                swapSet.push([previous, current, true]);\r\n            } else swapSet.push([previous, current, false]);\r\n        }\r\n    }\r\n\r\n    return swapSet;\r\n};\r\n","import Element from \"../../models/Element\";\r\n\r\n/**\r\n * Selection Sort always runs at O(n^2) because it uses 2 loops\r\n */\r\n\r\nexport const selectionSort = (arr: Element[]): (Element | Boolean)[][] => {\r\n    const swapSet: (Element | Boolean)[][] = [];\r\n\r\n    for (let i = 0; i < arr.length - 1; i++) {\r\n        let min = i;\r\n        for (let j = i + 1; j < arr.length; j++) {\r\n            if (arr[min].length > arr[j].length) min = j;\r\n        }\r\n\r\n        if (min !== i) {\r\n            [arr[i], arr[min]] = [arr[min], arr[i]];\r\n            swapSet.push([arr[i], arr[min], true]);\r\n        } else swapSet.push([arr[i], arr[min], false]);\r\n    }\r\n\r\n    return swapSet;\r\n};\r\n","import * as React from \"react\";\nimport { Header } from \"./components/Header/Header\";\nimport { Array } from \"./components/Array/Array\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const App = () => {\n    const [algorithm, setAlgorithm] = React.useState<string>(\"Algorithms\");\n    const [mode, setMode] = React.useState<string>(\"\");\n    const [sorting, setSorting] = React.useState<Boolean>(false);\n    const [sorted, setSorted] = React.useState<Boolean>(false);\n\n    const handleClickAlgorithm = (e: any): void => {\n        e.preventDefault();\n        setAlgorithm(e.target.name);\n    };\n\n    const handleClickMode = (e: any): void => {\n        e.preventDefault();\n        setMode(e.target.name);\n\n        if (e.target.name === \"Reset\") setSorted(false);\n\n        // Reset mode to enable constant re-initialization of array\n        setTimeout(() => {\n            setMode(\"\");\n        }, 100);\n    };\n\n    const toggleSorting = (): void => {\n        setSorting(!sorting);\n    };\n\n    const toggleSorted = (): void => {\n        setSorted(!sorted);\n    };\n\n    return (\n        <div>\n            <Header\n                algorithm={algorithm}\n                mode={mode}\n                sorting={sorting}\n                sorted={sorted}\n                handleClickAlgorithm={handleClickAlgorithm}\n                handleClickMode={handleClickMode}\n            />\n            <Array\n                algorithm={algorithm}\n                mode={mode}\n                toggleSorting={toggleSorting}\n                toggleSorted={toggleSorted}\n            />\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}